import lookml_gen as l 
import datetime as dt
import api as api
import pprint as pp

###
# Creating connection to the looker instance to make api calls against the sql_runner
connection = api.lookerAPIClient()

###
# SQL to run against sql_runner, assuming we're doing an information_schema scan to generate tables
sql = '''
SELECT * FROM profservices_scratch.LR$H2J2BCJ1CSO2O9WLUG7CD_base_eav_data AS base_eav_data
'''

###
# API method to run above sql aginst the inputted connection
view_data = connection.run_sql(sql, 'thelook_events_redshift')
# table_name = list(set([d['table_name'] for d in view_data]))
select_clause = []
for row in view_data:
    
    tmp_field = ', MAX(CASE WHEN EAV_data.column_name = \'{0}\' THEN EAV_data.column_value ELSE null END) AS \"{1}\"'.format(row['column_name'],row['column_value'])

    select_clause.append(tmp_field)
select_clause = '\n'.join(select_clause)
sql = '''
SELECT
    udv.RecordId AS record_id
        {0}
FROM EAV_data
        GROUP BY 1,2
'''.format(select_clause)
pp.pprint(sql)

# ####
# # to be removed, purely for testing purposes
# test = ['order_items']

# ###
# # Create View files for each table name
# for table_name in test:
#     tmp_view = l.View(table_name+'_base').setExtensionRequired().setMessage('This is an autogenerated view created by python at '+str(dt.datetime.now().replace(microsecond=0).isoformat()))
#     tmp_view.setSqlTableName('public.'+table_name)
#     for table in view_data:
#         if table['table_name'] == table_name:
#             if table['data_type'] == 'integer' or table['data_type'] == 'double precision':
#                 dim = l.Dimension(table['column_name'])
#                 dim.hide()
#                 dim.setType('number')
#                 if table['column_name'] == 'id':
#                     dim.setPrimaryKey()
#                     tmp_view + dim
#                 else:
#                     tmp_view + dim

#             elif table['data_type'] == 'timestamp without time zone':
#                 dim = l.DimensionGroup(table['column_name'])
#                 dim.hide()
#                 tmp_view + dim

#             else:
#                 dim = l.Dimension(table['column_name'])
#                 dim.setType('string')
#                 dim.hide()
#                 tmp_view + dim

# ############################
# # Example 3. Custom LookML patterns
# ############################
#     tmp_view.addComparisonPeriod(tmp_view.id, tmp_view.value, measure_type='count')

#     print(tmp_view)
