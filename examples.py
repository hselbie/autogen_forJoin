import lookml as l 

############################
# Exmample 1. Setting up the Looker View with 2 dimensions, id, value and dimnension group, created_at
############################
order_items = l.View('order_items')

order_items + 'id' + 'value' + l.DimensionGroup('created_at')
############################
# Example 2. Custom LookML patterns
############################
order_items.addComparisonPeriod(order_items.id,order_items.value,measure_type='count')

############################
# Example 3. Custom LookML templates
############################
import api as api
import pprint as pp

###
# Creating connection to the looker instance to make api calls against the sql_runner
connection = api.lookerAPIClient()

###
# SQL to run against sql_runner, assuming we're doing an information_schema scan to generate tables
sql = '''
SELECT TABLE_NAME,
       COLUMN_NAME,
       DATA_TYPE
FROM information_schema.columns
    WHERE table_schema = 'public'
    ORDER BY TABLE_NAME
'''

###
# API method to run above sql aginst the inputted connection
view_data = connection.run_sql(sql, 'thelook_events_redshift')
table_name = list(set([d['table_name'] for d in view_data]))

####
# to be removed, purely for testing purposes
test = ['order_items']

###
# Create View files for each table name
for table_name in test:
    tmp_view = l.View(table_name+'_base').setExtensionRequired().setMessage('This is an autogenerated view created by python')
    tmp_view.setSqlTableName('public.'+table_name)
    for table in view_data:
        if table['table_name'] == table_name:
            if table['data_type'] == 'integer' or table['data_type'] == 'double precision':
                dim = l.Dimension(table['column_name'])
                dim.hide()
                dim.setType('number')
                if table['column_name'] == 'id':
                    dim.setPrimaryKey()
                    tmp_view + dim
                else:
                    tmp_view + dim

            elif table['data_type'] == 'timestamp without time zone':
                dim = l.DimensionGroup(table['column_name'])
                dim.hide()
                tmp_view + dim

            else:
                dim = l.Dimension(table['column_name'])
                dim.setType('string')
                dim.hide()
                tmp_view + dim

    print(tmp_view)

# print(order_items)